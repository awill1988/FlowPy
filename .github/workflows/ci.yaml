# -------------------------------------------------------------------------------------------------
#                                FlowPy CI Workflow
# -------------------------------------------------------------------------------------------------
name: "FlowPy"

# The name that is displayed on the github webpage when you drill in for details on Github Actions.
# -------------------------------------------------------------------------------------------------
run-name: >
  ${{ github.event.pull_request.title }}

# -------------------------------------------------------------------------------------------------
#                            Github Event Triggers & Automation
# -------------------------------------------------------------------------------------------------
on: # yamllint disable-line rule:truthy
  schedule:
    - cron: "28 0 * * *"
  push:
    branches: ["develop", "master"]
  pull_request:
    branches: ["develop", "master"]

# -------------------------------------------------------------------------------------------------
#                          Github Runner: Github API Permissions
# -------------------------------------------------------------------------------------------------
permissions:
  contents: read
  pull-requests: read
  packages: write

# -------------------------------------------------------------------------------------------------
#                         Github Runner: Environment Variables
# -------------------------------------------------------------------------------------------------
env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  IMAGE_TAG: "${{ github.event.pull_request.head.sha || github.sha }}"
  IMAGE_NAME: flowpy
  REGISTRY: ghcr.io

# -------------------------------------------------------------------------------------------------
#                                 Cooperative Constraints
# -------------------------------------------------------------------------------------------------
# Only one run per PR <- branch (last commit cancels previous)
# -------------------------------------------------------------------------------------------------
concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # -----------------------------------------------------------------------------------------------
  #                               Github PR Context Extraction
  # -----------------------------------------------------------------------------------------------
  build-info:
    name: Build Info
    timeout-minutes: 10
    runs-on: "ubuntu-20.04"
    env:
      TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
    outputs:
      runs-on: "ubuntu-20.04"
      target-commit-sha:
        "${{steps.discover-pr-merge-commit.outputs.target-commit-sha ||
        github.event.pull_request.head.sha ||
        github.sha
        }}"
    steps:
      - name: discover pr merge commit
        id: discover-pr-merge-commit
        run: |
          TARGET_COMMIT_SHA="$(gh api '${{ github.event.pull_request.url }}' --jq .merge_commit_sha)"
          echo "TARGET_COMMIT_SHA=$TARGET_COMMIT_SHA" >> ${GITHUB_ENV}
          echo "target-commit-sha=${TARGET_COMMIT_SHA}" >> ${GITHUB_OUTPUT}
        if: github.event_name == 'pull_request_target'
      # The labels in the event aren't updated when re-triggering the job, So lets hit the API to get
      # up-to-date values
      - name: get latest pr labels
        id: get-latest-pr-labels
        run: |
          echo -n "pull-request-labels=" >> ${GITHUB_OUTPUT}
          gh api graphql --paginate -F node_id=${{github.event.pull_request.node_id}} -f query='
            query($node_id: ID!, $endCursor: String) {
              node(id:$node_id) {
                ... on PullRequest {
                  labels(first: 100, after: $endCursor) {
                    nodes { name }
                    pageInfo { hasNextPage endCursor }
                  }
                }
              }
            }' --jq '.data.node.labels.nodes[]' | jq --slurp -c '[.[].name]' >> ${GITHUB_OUTPUT}
        if: github.event_name == 'pull_request_target'
  # -----------------------------------------------------------------------------------------------
  #                                      Code Quality
  # -----------------------------------------------------------------------------------------------
  lint-code:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v1

      - name: shellcheck
        uses: azohra/shell-linter@latest

      - name: hadolint (Dockerfile)
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile

      - name: markdown-lint
        uses: avto-dev/markdown-lint@v1

      - name: prettier
        uses: creyD/prettier_action@v4.2
        with:
          prettier_options: --check **/*.{js,y[a]ml}
          only_changed: True
  # -----------------------------------------------------------------------------------------------
  #                                         Build
  # -----------------------------------------------------------------------------------------------
  publish-packages:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - build-target: openssl
          - build-target: sqlite3
          - build-target: libspatialite
          - build-target: libgeotiff
          - build-target: libwebp
          - build-target: proj
          - build-target: geos
          - build-target: minizip
          - build-target: libxml2
          - build-target: libspatialindex
          - build-target: librttopo
          - build-target: gdal
          - build-target: develop
    steps:
      - name: fetch source
        uses: actions/checkout@v3

      - name: setup qemu
        uses: docker/setup-qemu-action@v2

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: login to github container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ matrix.build-target }}
          tags: ghcr.io/onxmaps/flowpy:${{ matrix.build-target }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
